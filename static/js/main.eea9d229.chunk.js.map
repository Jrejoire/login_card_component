{"version":3,"sources":["components/Navbar/svg/logo.svg","components/Card/Card.js","components/Footer/Footer.js","components/Navbar/Navbar.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","heartClickHandle","state","isLoggedin","setState","heartIsClicked","alert","loginClickHandle","input","prompt","registeredUsers","some","user","userName","logoutClickHandle","registerClickHandle","localStorage","setItem","JSON","stringify","socialShare","currentTitle","document","title","currentURL","URL","window","open","storedUsers","getItem","this","parse","className","src","alt","onClick","icon","faHeart","faShareAlt","Component","Footer","Navbar","logo","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eea9d229.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b304d6bf.svg\";","import React, { Component } from 'react';\r\nimport './scss/Card.scss';\r\n\r\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faShareAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      registeredUsers: [\"admin\"],\r\n      userName: \"\",\r\n      heartIsClicked: false,\r\n      isLoggedin: false\r\n    }\r\n  }\r\n\r\n  //Getting the users from the local storage or setting an initial user\r\n  componentDidMount() {\r\n    var storedUsers = localStorage.getItem('users')\r\n    if (storedUsers === null) {\r\n      localStorage.setItem('users', JSON.stringify([...this.state.registeredUsers]));\r\n    } else {\r\n      this.setState({ registeredUsers: JSON.parse(storedUsers) });\r\n    }\r\n  }\r\n\r\n  //The heart is clickable only once logged in.\r\n  heartClickHandle = () => {\r\n    if (this.state.isLoggedin) {\r\n      this.setState({ heartIsClicked: !this.state.heartIsClicked });\r\n\r\n    } else {\r\n      alert('Please log in or register first');\r\n    }\r\n  }\r\n\r\n  //Login - Checks if user has registered through the state array.\r\n  loginClickHandle = () => {\r\n    let input = prompt(\"Please enter your username to login\", \"\");\r\n    if (this.state.registeredUsers.some(user => user === input)) {\r\n      this.setState({ isLoggedin: true });\r\n      this.setState({ userName: input });\r\n      alert(`Welcome to Kuflink ${input}! You are now logged in!`);\r\n    } else {\r\n      alert(\"Please register first\");\r\n    }\r\n  }\r\n\r\n  logoutClickHandle = () => {\r\n    this.setState({ isLoggedin: false });\r\n    alert(`It is sad to see you go ${this.state.userName}. You are now logged out`)\r\n  }\r\n\r\n\r\n  registerClickHandle = () => {\r\n    let input = prompt(\"Please enter your username to register\", \"\");\r\n    //Checks if user has registered before.\r\n    if (this.state.registeredUsers.some(user => user === input)) {\r\n      this.setState({ userName: input });\r\n      alert(\"You have already registered\")\r\n    } else {\r\n      //Otherwise user is saved in localStorage and the state.\r\n      localStorage.setItem('users', JSON.stringify([...this.state.registeredUsers, input]));\r\n      this.setState({ registeredUsers: [...this.state.registeredUsers, input] });\r\n      this.setState({ userName: input });\r\n      alert(`You are now registered under ${input}. Please log in.`)\r\n    }\r\n  }\r\n\r\n  //Sharing the page to twitter\r\n  socialShare = () => {\r\n    var currentTitle = document.title;\r\n    var currentURL = document.URL;\r\n    window.open(`https://twitter.com/share?url=${currentURL}&text=Check out my awesome${currentTitle} - `, \"\", \"height=260,width=500,left=100,top=100,menubar=0\");\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-container\">\r\n          <div className=\"card-thumbnail\">\r\n            <img src=\"https://picsum.photos/50\" alt=\"thumbnail\" />\r\n          </div>\r\n          <h1>\r\n            Title goes here\r\n          </h1>\r\n          <h2>\r\n            Secondary text\r\n          </h2>\r\n          <div className=\"card-image\">\r\n            <img src=\"https://picsum.photos/300/300\" alt=\"main\" />\r\n          </div>\r\n          <p className=\"card-description\">\r\n            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Praesentium, eos?\r\n          </p>\r\n          <div className={`action login ${this.state.isLoggedin ? \"active\" : \"\"}`} onClick={this.loginClickHandle}>\r\n            LOGIN\r\n          </div>\r\n          <div className={`action register ${this.state.userName ? \"active\" : \"\"}`} onClick={this.registerClickHandle}>\r\n            REGISTER\r\n          </div>\r\n          <div className={`action logout ${this.state.isLoggedin ? \"\" : \"active\"}`} onClick={this.logoutClickHandle}>\r\n            LOGOUT\r\n          </div>\r\n          <div className=\"icon-container heart\">\r\n            <FontAwesomeIcon className={`icon heart-icon ${this.state.heartIsClicked ? \"active\" : \"\"}`} onClick={this.heartClickHandle} icon={faHeart} />\r\n          </div>\r\n          <div className=\"icon-container share\">\r\n            <FontAwesomeIcon className=\"icon share-icon\" icon={faShareAlt} onClick={this.socialShare} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer-container\">\r\n      Copyright 2020\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport logo from './svg/logo.svg';\r\nimport './scss/Navbar.scss';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <img src={logo} className=\"nav-logo\" alt=\"logo\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './scss/App.scss';\n\nimport Card from '../components/Card/Card';\nimport Footer from '../components/Footer/Footer';\nimport Navbar from '../components/Navbar/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"grid-container\">\n        <Navbar />\n        <Card className=\"card-component\" />\n        <p className=\"quote\">\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit.\n          Odit nihil dolor magnam dolorum? Optio voluptas explicabo\n          nam! Aliquid, beatae! Minima accusantium, vel hic\n          numquam eveniet fugiat mollitia recusandae dolores\n          deleniti?\n        </p>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}